// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password      String
  createdAt     DateTime @default(now())
  isBan         Boolean? @default(false)
  role          String
  refreshToken  String?
  avatar        String?
  notifications Notify[]
  admin         Admin?   @relation
  guest         Guest?   @relation
}

model Notify {
  id        String   @id @default(uuid())
  message   String
  read      Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime @default(now())
}

model Guest {
  id           String     @id @default(uuid())
  user         User?      @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  userId       String?    @unique // Khoá ngoại
  gender       String?
  phone        String?
  address      String?
  favoritefood String?
  birthYear    Int?
  points       Int?
  role         String     @default("Normal")
  carts        Cart?      @relation(name: "GuestCart")
  orders       Order[]
  favorites    Favorite[]
  reviews      Review[]
}

model Admin {
  id       String    @id @default(uuid())
  user     User?     @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  userId   String?   @unique // Khoá ngoại
  actions  Action[]
  vouchers Voucher[]
  posts    Post[]
  dishs    Dish[]
}

model Action {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  action    String
  admin     Admin    @relation(fields: [adminId], references: [id])
  adminId   String
}

model Review {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  comment   String?
  value     String
  guestId   String?
  guest     Guest?   @relation(fields: [guestId], references: [id])
  dish      Dish     @relation(fields: [dishId], references: [id])
  dishId    String
}

model Favorite {
  id      String  @id @default(uuid())
  guestId String?
  guest   Guest?  @relation(fields: [guestId], references: [id])
  dish    Dish    @relation(fields: [dishId], references: [id])
  dishId  String

  @@unique([guestId, dishId]) // không cho 1 học sinh đăng ký 2 lần cùng 1 khoá
}

model Cart {
  id      String        @id @default(uuid())
  guest   Guest?        @relation(fields: [guestId], references: [id], name: "GuestCart")
  guestId String?       @unique
  dishs   CartAndDish[]
}

model CartAndDish {
  id     String @id @default(uuid())
  cart   Cart   @relation(fields: [cartId], references: [id])
  cartId String
  dish   Dish   @relation(fields: [dishId], references: [id])
  dishId String
  number Int    @default(1)
}

model OrderAndDish {
  id      String @id @default(uuid())
  order   Order  @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orderId String
  dish    Dish   @relation(fields: [dishId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dishId  String
  number  Int    @default(1)

  @@unique([orderId, dishId]) // không cho 1 học sinh đăng ký 2 lần cùng 1 khoá
}

model Dish {
  id           String         @id @default(uuid())
  name         String
  url          String?
  type         String
  createdAt    DateTime       @default(now())
  priceOld     Int
  priceNew     Int?
  FoodChart    String?
  description  String?
  ration       Int            @default(1)
  calo         Int?
  ingredients  String?
  carts        CartAndDish[]
  OrderAndDish OrderAndDish[]
  admin        Admin?         @relation(fields: [updateBy], references: [id])
  updateBy     String?
  favorites    Favorite[]
  reviews      Review[]
  brand        String?
}

model Post {
  id          String    @id @default(uuid())
  name        String
  title       String
  createdAt   DateTime  @default(now())
  createdBy   String
  updateAt    DateTime?
  updateBy    String?
  description String?
  label       String?
  ingredients String?
  admin       Admin?    @relation(fields: [adminId], references: [id])
  adminId     String?
}

model Voucher {
  id          String   @id @default(uuid())
  title       String
  code        String
  description String
  dateStart   DateTime
  dateEnd     DateTime
  discount    Int
  orders      Order[]
  admin       Admin?   @relation(fields: [adminId], references: [id])
  adminId     String?
}

model Order {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  discount    Int
  nameUser    String?
  email       String?
  note        String?
  phone       String?
  address     String?
  payment     Int
  status      String
  type        String
  description String?
  guest       Guest    @relation(fields: [guestId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  guestId     String

  voucher   Voucher? @relation(fields: [voucherId], references: [id])
  voucherId String?

  orderAndDish OrderAndDish[]
}
